---
description: 
globs: 
alwaysApply: false
---
---
description: "Enforce standards for the buyer-facing API in LeadPoet."
globs:
  - "Leadpoet/api/*.py"
alwaysApply: true
---

# API Standards

The LeadPoet subnet exposes a FastAPI-based API for buyers to submit ICP queries and receive curated prospect lists. The following standards ensure compliance:

## Endpoints
- **POST /leads**:
  - Input: `{ "num_leads": int (1-100), "industry": str (optional), "region": str (optional), "api_key": str }`.
  - Output: `{ "query_id": str, "status": str }`.
  - Action: Insert query into `queries` table, trigger miner curation via `get_query_api_axons`.
- **GET /leads/{query_id}**:
  - Input: `{ "api_key": str }` (header).
  - Output: `{ "query_id": str, "status": str, "leads": list[dict], "error": str (optional) }`.
  - Action: Return Final Curated List from `scores` table (top 10 prospects, C > 0.1).
- **POST /feedback**:
  - Input: `{ "query_id": str, "leads": list[dict], "feedback_score": float (0-10), "api_key": str }`.
  - Output: `{ "status": str }`.
  - Action: Update `conversion_score` in `prospects` table via `neurons/validator.handle_buyer_feedback`.

## Security
- Validate `api_key` against Supabase `buyers` table (field: `api_key`, linked to `buyer_hotkey`).
- Enforce HTTPS and CORS (allow only approved origins).
- Rate-limit requests (e.g., max 100/hour per `api_key`).
- Sanitize inputs to prevent injection attacks.

## Logging
- Log all API requests to Supabase (`api_logs` table) with `query_id`, `buyer_hotkey`, `timestamp`, `endpoint`, `status`.
- Log errors with stack traces (exclude sensitive data like `api_key`).

## Testing
- Write unit tests (`tests/api_tests.py`) mocking Supabase and Bittensor interactions.
- Test edge cases: invalid `api_key`, failed queries, feedback updates.
- Ensure >90% coverage for API endpoints.