---
description: 
globs: 
alwaysApply: false
---
---
description: "Enforce standards for tracking miner and validator incentives."
globs:
  - "neurons/*.py"
  - "Leadpoet/base/*.py"
  - "Leadpoet/validator/reward.py"
alwaysApply: true
---

# Incentive Tracking Standards

The LeadPoet subnet allocates emissions based on miner sourcing/curating and validator performance. The following standards ensure accurate tracking:

## Miner Incentives
- **Sourcing Score (Sₘ)**:
  - Calculate `Qₘ(t)`: Count of sourced prospects in `curated_lists` for period `t`.
  - Calculate `Rₘ(t)`: Average `conversion_score` from `scores` for sourced prospects.
  - Compute `Pₘ(t) = (Qₘ(t) * Rₘ(t)) / (∑ₘ (Qₘ(t) * Rₘ(t)))`.
  - Weighted: `Sₘ = 0.55 * Pₘ(last 14 days) + 0.25 * Pₘ(last 30 days) + 0.20 * Pₘ(last 90 days)`.
- **Curating Score (Kₘ)**:
  - Calculate `Iₘ(t)`: Count of curated prospects in `curated_lists` for period `t`.
  - Calculate `Jₘ(t)`: Average `conversion_score` from `scores` for curated prospects.
  - Compute `Hₘ(t) = (Iₘ(t) * Jₘ(t)) / (∑ₘ (Iₘ(t) * Jₘ(t)))`.
  - Weighted: `Kₘ = 0.55 * Hₘ(last 14 days) + 0.25 * Hₘ(last 30 days) + 0.20 * Hₘ(last 90 days)`.
- **Reward Weight (Wₘ)**: `Wₘ = 0.40 * Sₘ + 0.60 * Kₘ`.
- **Emission Allocation (Eₘ)**: `Eₘ = M * (Wₘ / (∑ₘ Wₘ))`, where `M` is total miner emissions.
- Implement in `neurons/miner.py` and store in local cache, synced with `scores` table.

## Validator Incentives
- Track `precision`, `consistency`, and `reputation` in `neurons/validator.py`.
- Update `validation_history` with each audit/scoring result.
- Calculate `J_v` (consistency) over 14/30/90 days based on validation accuracy.
- Adjust `precision` based on buyer feedback and reputation challenges.
- Emission allocation based on `reputation` (R_v) relative to other validators.

## Storage
- Store miner scores (`Sₘ`, `Kₘ`, `Wₘ`) in `miners` table (fields: `miner_uid`, `sourcing_score`, `curating_score`, `reward_weight`, `last_updated`).
- Store validator scores (`R_v`) in `validators` table (fields: `validator_hotkey`, `reputation`, `precision`, `consistency`, `last_updated`).
- Sync scores with Supabase every epoch (configurable, default 100 blocks).

## Security
- Sign score updates with Bittensor wallet to prevent tampering.
- Audit score calculations via `validation_logs` and `scoring_logs` tables.